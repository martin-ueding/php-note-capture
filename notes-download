#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>

"""
Downloads the notes in the JSON format and inserts them in the taskwarrior
database.
"""

import argparse
import configparser
import json
import os
import os.path
import subprocess

__docformat__ = "restructuredtext en"

configfile = os.path.expanduser("~/.config/php-note-capture/config.ini")
notesfile = "notes.js"

def main():
    options = _parse_args()

    config = configparser.ConfigParser()
    config.read(configfile)

    realm = config.get("auth", "realm")
    uri = config.get("auth", "uri")
    user = config.get("auth", "user")
    passwd = config.get("auth", "passwd")
    reseturl = config.get("reset", "reseturl")

    if os.path.isfile(notesfile):
        os.remove(notesfile)

    try:
        subprocess.check_call(["wget", "-O", notesfile, "--user", user,
                               "--password", passwd, uri],
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except subprocess.CalledProcessError as e:
        raise

    notes = load_notes()

    try:
        if len(notes) > 0:
            for note in notes:
                text = note["text"]
                command = ["task", "add", text]
                if "priority" in note:
                    priority = note["priority"]
                    if priority in ["l", "h", "m"]:
                        command += ["pri:{}".format(command)]

                subprocess.check_call(command)
                print("Note “{}” created.".format(text))

            subprocess.check_call(["wget", "-O", "/dev/null", "--user", user,
                                   "--password", passwd, reseturl],
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE)
        else:
            print("No new notes. Done.")
    except subprocess.CalledProcessError as e:
        raise

    os.unlink(notesfile)


def load_notes():
    with open(notesfile) as f:
        return json.loads(f.read())


def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()
